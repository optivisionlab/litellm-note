import requests
import base64
import wave
import os


def gemini_tts(
    api_key: str,
    text: str,
    model: str = "gemini-2.5-flash-preview-tts",
    voice_name: str = "Kore",
    sample_rate: int = 24000,
    channels: int = 1,
    sample_width: int = 2,
    style: str | None = None,
    output_path: str = "output.wav"
):
    """
    H√†m g·ªçi API Text-to-Speech c·ªßa Gemini (AI Th·ª±c Chi·∫øn)
    v√† l∆∞u k·∫øt qu·∫£ th√†nh file .wav c√≥ th·ªÉ nghe ƒë∆∞·ª£c.

    Parameters
    ----------
    api_key : str
        Kh√≥a API t·ª´ https://thucchien.ai
    text : str
        VƒÉn b·∫£n c·∫ßn ƒë·ªçc.
    model : str
        M√¥ h√¨nh TTS s·ª≠ d·ª•ng (m·∫∑c ƒë·ªãnh: 'gemini-2.5-flash-preview-tts')
    voice_name : str
        Gi·ªçng ƒë·ªçc (v√≠ d·ª•: 'Kore', 'Breeze', 'Zephyr', ...)
    sample_rate : int
        T·∫ßn s·ªë l·∫•y m·∫´u (Hz), m·∫∑c ƒë·ªãnh 24000
    channels : int
        S·ªë k√™nh (1=mono)
    sample_width : int
        S·ªë byte m·ªói m·∫´u (2 = 16-bit)
    style : str | None
        Phong c√°ch n√≥i (v√≠ d·ª•: "cheerful", "sad", "serious").
        N·∫øu c√≥, ch·ªâ th·ªã s·∫Ω ƒë∆∞·ª£c ch√®n v√†o text m√† kh√¥ng b·ªã ƒë·ªçc ra.
    output_path : str
        File √¢m thanh ƒë·∫ßu ra (.wav)
    """

    # Chu·∫©n b·ªã payload text
    text_prompt = text
    if style:
        text_prompt = f"Make the voice sound {style}.\n{text}"

    payload = {
        "contents": [
            {"parts": [{"text": text_prompt}]}
        ],
        "generationConfig": {
            "responseModalities": ["AUDIO"],
            "speechConfig": {
                "voiceConfig": {
                    "prebuiltVoiceConfig": {"voiceName": voice_name}
                }
            }
        }
    }

    url = f"https://api.thucchien.ai/gemini/v1beta/models/{model}:generateContent"
    headers = {
        "x-goog-api-key": api_key,
        "Content-Type": "application/json"
    }

    # G·ªçi API
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    data = response.json()

    # Gi·∫£i m√£ √¢m thanh base64
    audio_base64 = data["candidates"][0]["content"]["parts"][0]["inlineData"]["data"]
    audio_bytes = base64.b64decode(audio_base64)

    # L∆∞u th√†nh WAV (PCM 16-bit, 24kHz)
    with wave.open(output_path, "wb") as wf:
        wf.setnchannels(channels)
        wf.setsampwidth(sample_width)
        wf.setframerate(sample_rate)
        wf.writeframes(audio_bytes)

    print(f"‚úÖ File √¢m thanh ƒë√£ l∆∞u t·∫°i: {output_path}")
    print(f"üé§ Gi·ªçng: {voice_name} | Phong c√°ch: {style or 'M·∫∑c ƒë·ªãnh'} | T·∫ßn s·ªë: {sample_rate}Hz")

    return output_path



print("======= start ======")
# --- V√≠ d·ª• s·ª≠ d·ª•ng 1 d·ªçng ---
AI_API_KEY = os.getenv("API_KEY", "sk-1234") # Thay b·∫±ng API key c·ªßa b·∫°n

prompt = """
    Ch√∫c b·∫°n m·ªôt ng√†y th·∫≠t vui v·∫ª!
"""

gemini_tts(
    api_key=AI_API_KEY, 
    text=prompt, 
    model= "gemini-2.5-flash-preview-tts", 
    voice_name="Kore", 
    style="cheerful",
    output_path="logs/single_speech.wav"
)
print("======= end ======")