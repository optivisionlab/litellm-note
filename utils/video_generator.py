import requests
import base64
import time
import re
import os


BASE_URL = "https://api.thucchien.ai/gemini/v1beta"
DOWNLOAD_URL = "https://api.thucchien.ai/gemini/download/v1beta/files"

def start_video_generation(prompt, model, api_key, **params):
    """
    B·∫Øt ƒë·∫ßu t·∫°o video b·∫•t ƒë·ªìng b·ªô.
    Returns: operation_name
    """
    url = f"{BASE_URL}/models/{model}:predictLongRunning"
    headers = {
        "Content-Type": "application/json",
        "x-goog-api-key": api_key
    }
    payload = {
        "instances": [{"prompt": prompt}],
        "parameters": params
    }

    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    data = response.json()
    operation_name = data.get("name")
    print(f"‚úÖ T·∫°o t√°c v·ª• th√†nh c√¥ng, operation_name = {operation_name}")
    return operation_name


def check_video_status(operation_name, api_key, wait=True, interval=10, timeout=300):
    """
    Ki·ªÉm tra tr·∫°ng th√°i t·∫°o video.
    N·∫øu wait=True, s·∫Ω poll cho ƒë·∫øn khi ho√†n th√†nh ho·∫∑c timeout.
    Returns: video_id ho·∫∑c None n·∫øu ch∆∞a xong.
    """
    headers = {"x-goog-api-key": api_key}
    url = f"{BASE_URL}/{operation_name}"
    start_time = time.time()

    while True:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        done = data.get("done", False)

        if done:
            try:
                uri = data["response"]["generateVideoResponse"]["generatedSamples"][0]["video"]["uri"]
                print(f"üé¨ Video s·∫µn s√†ng: {uri}")
                # Tr√≠ch video_id t·ª´ URI Google API
                match = re.search(r'/files/([^:/]+)', uri)
                video_id = match.group(1) if match else None
                print(f"üéû video_id = {video_id}")
                return video_id
            except Exception:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URI trong response.")
                return None

        if not wait:
            return None

        elapsed = time.time() - start_time
        if elapsed > timeout:
            print("‚è∞ H·∫øt th·ªùi gian ch·ªù, t√°c v·ª• ch∆∞a ho√†n t·∫•t.")
            return None

        print(f"‚è≥ Ch∆∞a xong... ch·ªù {interval}s r·ªìi ki·ªÉm tra l·∫°i.")
        time.sleep(interval)


def download_video(video_id, api_key, output_path="output.mp4"):
    """
    T·∫£i video ƒë√£ sinh v·ªÅ m√°y.
    """
    headers = {"x-goog-api-key": api_key}
    url = f"{DOWNLOAD_URL}/{video_id}:download?alt=media"

    with requests.get(url, headers=headers, stream=True) as r:
        r.raise_for_status()
        with open(output_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    print(f"üíæ Video ƒë√£ t·∫£i v·ªÅ: {output_path}")
    return output_path


def start_video_with_image(prompt, image_path, model, api_key, **params):
    """
    B·∫Øt ƒë·∫ßu t·∫°o video t·ª´ prompt + h√¨nh ·∫£nh (image-to-video).
    H√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c m√£ h√≥a base64 v√† g·ª≠i k√®m.
    """
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y ·∫£nh: {image_path}")

    # ƒê·ªçc file v√† m√£ h√≥a base64
    with open(image_path, "rb") as img_file:
        img_base64 = base64.b64encode(img_file.read()).decode("utf-8")

    # X√°c ƒë·ªãnh mime type
    ext = os.path.splitext(image_path)[1].lower()
    mime = "image/png" if ext == ".png" else "image/jpeg"

    url = f"{BASE_URL}/models/{model}:predictLongRunning"
    headers = {
        "Content-Type": "application/json",
        "x-goog-api-key": api_key
    }

    payload = {
        "instances": [{
            "prompt": prompt,
            "image": {
                "bytesBase64Encoded": img_base64,
                "mimeType": mime
            }
        }],
        "parameters": params
    }

    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    data = response.json()
    operation_name = data.get("name")
    print(f"‚úÖ ƒê√£ t·∫°o t√°c v·ª• image-to-video, operation_name = {operation_name}")
    return operation_name


# -------------------------
# üß™ V√≠ d·ª• s·ª≠ d·ª•ng: text 2 video

API_KEY = "sk-1234"
MODEL = "veo-3.0-generate-001"
PROMPT = "Video of the Vietnamese flag flying in Ba Dinh Square"

operation = start_video_generation(PROMPT, MODEL, API_KEY, aspectRatio="16:9", resolution="720p")
video_id = check_video_status(operation, API_KEY, wait=True, interval=15, timeout=600)
if video_id:
    download_video(video_id, API_KEY, output_path="assets/video_test_1.mp4")


# -------------------------
# üß™ V√≠ d·ª• s·ª≠ d·ª•ng: image 2 video

API_KEY = "sk-12343"
MODEL = "veo-3.0-generate-001"
PROMPT = "Video of the Vietnamese flag flying in Ba Dinh Square"
path_image = "assets/ba_dinh_hn.jpg"

operation = start_video_with_image(
        prompt=PROMPT,
        image_path=path_image,
        model=MODEL,
        api_key=API_KEY,
        aspectRatio="16:9",
        resolution="720p",
        personGeneration="allow_adult"
    )
video_id = check_video_status(operation, API_KEY, wait=True, interval=15, timeout=600)
if video_id:
    download_video(video_id, API_KEY, output_path="assets/ba_dinh_video.mp4")